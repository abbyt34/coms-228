package edu.iastate.cs2280.hw1;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;


/**
 *  @author Abby Taylor
 *  @date 9/20/2024
 *
 * This Town class contains two seperate constructors for a Town grid. One is read from a file and one is randomly 
 * generated by user input. This class also contains the method to properly print the grids.
 */
public class Town {
	
	private int length, width;  //Row and col (first and second indices)
	public TownCell[][] grid;
	
	/**
	 * Constructor to be used when user wants to generate grid randomly, with the given seed.
	 * This constructor does not populate each cell of the grid (but should assign a 2D array to it).
	 * 
	 * @param length
	 * @param width
	 */
	public Town(int length, int width) {
		//intialize the private variable
		this.length = length;
		//intialize the private variable
		this.width = width;
		//construct a TownCell grid based on the length and width inputted
		this.grid = new TownCell[length][width];
	}
	
	/**
	 * Constructor to be used when user wants to populate grid based on a file.
	 * Please see that it simple throws FileNotFoundException exception instead of catching it.
	 * Ensure that you close any resources (like file or scanner) which is opened in this function.
	 * 
	 * @param inputFileName
	 * @throws FileNotFoundException
	 */
	public Town(String inputFileName) throws FileNotFoundException {
		//create a new file variable for the input
		File file = new File(inputFileName);
		//create a new scanner to read the file
		Scanner scnr = new Scanner(file);
		
		//create a new String for the dimensions given at the top of the file
		String dimensionString = scnr.nextLine();
		//split the string into two indices of an array
		String[] dimensions = dimensionString.split(" ");
		
		//intialize the length variable with the first variable of the dimensions array
		this.length = Integer.parseInt(dimensions[0]);
		//intialize the width variable with the second variable of the dimensions array
		this.width = Integer.parseInt(dimensions[1]);
		
		//create a new TownCell grid with the read and inputted indexs
		grid = new TownCell[length][width];
		
		//for the length of the grid
		for (int i = 0; i < length; i++) {
			//read the first line
			String line = scnr.nextLine();
			//create a line by line scanner
			Scanner lineScanner = new Scanner(line);
	
			//for the width of the grid
			for (int j = 0; j < width; j++) {
				//read the next variables in the line
				String state = lineScanner.next();
				
				//if the character present is C, intialize the grid with a Casual cell
				if (state.equals("C")) {
					//intialize the grid with a Casual cell
					grid[i][j] = new Casual(this, i, j);
				}					
				//if the character present is S, intialize the grid with a Streamer cell
				else if (state.equals("S")) {
					//intialize the grid with a Streamer cell
					grid[i][j] = new Streamer(this, i, j);
				}
				//if the character present is O, intialize the grid with a Outage cell
				else if (state.equals("O")) {
					//intialize the grid with a Outage cell
					grid[i][j] = new Outage(this, i, j);
				}
				//if the character present is R, intialize the grid with a Reseller cell
				else if (state.equals("R")) {
					//intialize the grid with a Reseller cell
					grid[i][j] = new Reseller(this, i, j);
				}
				//if the character present is E, intialize the grid with a Empty cell
				else if (state.equals("E")) {
					//intialize the grid with a Empty cell
					grid[i][j] = new Empty(this, i, j);
				}
				//if there is no character present, continue to the next line
				else {
					continue;
				}
			}
			//close the temporary line scanner
			lineScanner.close();
		}
		//close the proper scanner
		scnr.close();
	}
	
	/**
	 * Returns width of the grid.
	 * 
	 * @return int width
	 */
	public int getWidth() {
		//return width
		return width;
	}
	
	/**
	 * Returns length of the grid.
	 * 
	 * @return int length
	 */
	public int getLength() {
		//return length
		return length;
	}

	/**
	 * Initialize the grid by randomly assigning cell with one of the following class object:
	 * Casual, Empty, Outage, Reseller OR Streamer
	 * 
	 * @param int seed
	 */
	public void randomInit(int seed) {
		//trains the Random generator with the inputted seed
		Random rand = new Random(seed);
		
		//for loop to iterate through the grid
		for (int i = 0; i < getLength(); i++) {
			for (int j = 0; j < getWidth(); j++) {
				//generates a 0-4 number to match the static int in TownCell
				int randVal = rand.nextInt(5);
				//if randVal equals 0, the cell is a Reseller
				if (randVal == TownCell.RESELLER) {
					//populates a Reseller cell in the place
					grid[i][j] = new Reseller(this, i , j);
				}
				//if randVal equals 1, the cell is Empty
				else if (randVal == TownCell.EMPTY) {
					//populates a Empty cell in the place
					grid[i][j] = new Empty(this, i , j);
				}
				//if randVal equals 2, the cell is a Casual user
				else if (randVal == TownCell.CASUAL) {
					//populates a Casual cell in the place
					grid[i][j] = new Casual(this, i , j);
				}
				//if randVal equals 3, the cell is an Outage cell
				else if (randVal == TownCell.OUTAGE) {
					//populates a Outage cell in the place
					grid[i][j] = new Outage(this, i , j);
				}
				//if randVal equals 4, the cell is a Streamer
				else if (randVal == TownCell.STREAMER) {
					//populares a Streamer cell in its place
					grid[i][j] = new Streamer(this, i, j);
				}
			}
		}
	}
	
	/**
	 * Output the town grid. For each square, output the first letter of the cell type.
	 * Each letter should be separated either by a single space or a tab.
	 * And each row should be in a new line. There should not be any extra line between 
	 * the rows.
	 * 
	 * @return String s
	 */
	@Override
	public String toString() {
		//create a String object s
		String s = "";
		
		//if the grid is null or isn't initilaized, print an error message
		if (grid == null) {
			return "Error";
		}
		
		//iterate through the entire Town object
		for (int i = 0; i < length; i++) {
			for (int j = 0; j < width; j ++) {
				//iterate through each TownCell object
				TownCell cellName = grid[i][j];
				//assign a State to each TownCell object
				State stateName = cellName.who();
				//assign a name to the State object for each cell and splice it into a substring including only the first character
				s += stateName.name().substring(0, 1);
				//add a space between each character
				s += " ";
			}
			//each line goes a new line
			s += "\n";
		}
		//return the String object s
		return s;
	}
}
